@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<MudContainer class="d-flex justify-center align-center mt-5">
    <MudStack class="w-100">
        <MudCard Elevation="25" Class="w-100">
            <MudCardHeader>
                <MudText Typo="Typo.h2">Add questions</MudText>
            </MudCardHeader>
            <MudForm Model="@_question" @ref="@_form" ValidationDelay="1" bind-Errors="@_errors">
                <MudCardContent>
                    <MudStack Spacing="3">
                        <MudTextField @bind-Value="_question.Text"
                                      For="@(() => _question.Text)"
                                      Immediate="true"
                                      Label="Text"
                                      Required="true"
                                      Lines="2"/>
                        <MudStack Row="true">
                            <MudTextField @bind-Value="_possibleAnswer.Text"
                                          For="@(() => _possibleAnswer.Text)"
                                          Immediate="true"
                                          Validation="@(IsAnswersCorrect)"
                                          Label="Possible Answer"/>
                            <MudSwitch T="bool" Color="Color.Success" @bind-Checked="_possibleAnswer.IsCorrect" For="@(() => _possibleAnswer.IsCorrect)" Label="Is Correct"/>
                            <MudButton Variant="Variant.Filled" Color="Color.Surface" Class="ml-auto"
                                       OnClick="AddPossibleAnswer" Size="Size.Small">
                                Add possible answer
                            </MudButton>
                        </MudStack>
                        <MudText>Possible Answers: </MudText>
                        <MudStack Spacing="2" Justify="Justify.SpaceBetween">
                            @for (var i = 0; i < _question.Answers.Count; i++)
                            {
                                var i1 = i;
                                <MudText Color="@GetAnswerColor(_question.Answers[i1].IsCorrect)">
                                    @($"{i1 + 1}. {_question.Answers[i1].Text}")
                                    <MudButton Color="Color.Transparent" OnClick="() => _question.Answers.RemoveAt(i1)"
                                               StartIcon="@Icons.Material.Filled.Delete" IconColor="Color.Error" Size="Size.Small"/>
                                </MudText>
                            }
                        </MudStack>
                    </MudStack>
                </MudCardContent>
            </MudForm>
            <MudCardActions>
                <MudButtonWithProcessing Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
                                         OnClick="@(async () => await AddQuestion())" Text="Add question"/>
                <MudButtonWithProcessing Variant="Variant.Filled" Color="Color.Success" Class="ml-auto"
                                         OnClick="@(async () => await SubmitQuestions())" Text="Finish quiz"/>
            </MudCardActions>
        </MudCard>
        <MudStack>
            @foreach (var question in _questions)
            {
                <MudCard>
                    <MudCardHeader>
                        @question.Text
                    </MudCardHeader>
                    <MudCardContent>
                        <MudStack Row="@true" AlignItems="@AlignItems.Start">
                            @for (var i = 0; i < question.Answers.Count; i++)
                            {
                                var i1 = i;
                                <MudText Color="@GetAnswerColor(question.Answers[i1].IsCorrect)">@($"{i1 + 1}. {question.Answers[i1].Text}")</MudText>
                            }
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            }
        </MudStack>
    </MudStack>
</MudContainer>

@code {
    private List<Question> _questions = new();
    private Answer _possibleAnswer = new();
    private string[] _errors = { };
    private Question _question = new();
    private MudForm _form = null!;

    [Parameter]
    public ISnackbar? Snackbar { get; set; }

    [Parameter]
    public Guid? QuizId { get; set; }

    private void AddPossibleAnswer()
    {
        _question.Answers.Add(_possibleAnswer);
        _possibleAnswer = new Answer();
    }

    private async Task AddQuestion()
    {
        await _form.Validate()!;
        if (!_form.IsValid) return;

        _questions.Add(new Question { Text = _question.Text, Answers = new List<Answer>(_question.Answers) });
        Snackbar?.Add("Question added!");
        _question = new Question();
        _possibleAnswer = new Answer();
    }

    private async Task SubmitQuestions()
    {
        var result = await HttpClient.PutAsJsonAsync($"/api/Quizzes/{QuizId}/SetQuestions", _questions);
        if (result.IsSuccessStatusCode)
        {
            Snackbar?.Add("Quiz finished!");
            NavigationManager.NavigateTo("/CreateQuiz/Success");
        }
        else
        {
            Snackbar?.Add("Failed");
        }
    }

    private Color GetAnswerColor(bool isCorrect)
    {
        return isCorrect ? Color.Success : Color.Default;
    }

    private IEnumerable<string> IsAnswersCorrect(string pw)
    {
        if (_question.Answers.Count < 2)
            yield return "You have to add at least two possible answers";
        if (_question.Answers.Count(answer => answer.IsCorrect) != 1)
            yield return "Should be only one correct answer";
    }

}